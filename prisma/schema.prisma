// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  price        Decimal        @db.Decimal(10, 2)
  brand        String?
  stock        Int?
  rating       Decimal        @db.Decimal(2, 1)
  thumbnail    String?        @db.VarChar(255)
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int
  OrderItem    OrderItem[]
  ProductImage ProductImage[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  imageUrl  String  @db.VarChar(255)
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String    @db.VarChar(255)
  products Product[]
}

model Customer {
  // Define the fields and their types
  id          Int     @id @default(autoincrement()) // Primary key
  name        String // Not null
  email       String // Not null
  phoneNumber String // Not null
  address     String // Not null
  city        String // Not null
  state       String // Not null
  zipCode     String? // Nullable
  Order       Order[]
}

model Order {
  // Define the fields and their types
  id         Int         @id @default(autoincrement()) // Primary key
  date       DateTime
  total      Decimal
  status     String
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId Int
  Payment    Payment[]
  OrderItem  OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}

model Payment {
  // Define the fields and their types
  ID      Int      @id @default(autoincrement()) // Primary key
  type    String
  amount  Decimal
  date    DateTime
  order   Order    @relation(fields: [orderId], references: [id])
  orderId Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  role           Role      @default(USER)
  image          String?
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
